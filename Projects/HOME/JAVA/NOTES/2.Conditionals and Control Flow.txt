DECISIONS:

Example:

public class Conditionals {
	public static void main(String[] args) {


		if (1 < 4 && 0 > 5) {

			System.out.println("You ordered a cup of hot, mint tea.");

		} else if (21 <= 19 || 17 >= 28) {

			System.out.println("You ordered freshly squeezed orange juice!");

		} else if ( !(true == true) ) {

			System.out.println("You ordered hot cocoa!");

		} else {

			System.out.println("You ordered a cup of Java!");

		}

		char answerChoice = 'C';

		switch (answerChoice) {

			case 'A': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break;

			case 'B': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break;

			case 'C': System.out.println("You answered: " + answerChoice + ". That is correct!");
								break;

			case 'D': System.out.println("You answered: " + answerChoice + ". Please try again.");
								break;

			default:
				System.out.println("Please select a valid answer choice.");

		}


	}
}




The Output Will be:
                                        You ordered a cup of Java!
                                        You answered: C. That is correct!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BOOLEAN OPERATORS: &&  (Part 1)

--> Let's look at a set of operators that let us use control flow in our programs. These operators are called Boolean operators.

--> There are three Boolean operators that we will explore. Let's start with the first one:

                  ->  and

                          1. The and operator is represented in Java by &&.
                          2. It returns a boolean value of true only when the expressions on both sides of && are true.

                  For example, the code below shows one outcome of the Boolean operator &&:

                          // The following expression uses the "and" Boolean operator
                          System.out.println(true && true); // prints true

                  The code below shows the rest of the possible outcomes of the Boolean operators: &&:

                        // The following expressions use the "and" Boolean operator
                        System.out.println(false && false); // prints false
                        System.out.println(false && true); // prints false
                        System.out.println(true && false); // prints false

                  We can also use the Boolean operator && with Boolean expressions such as the following:

                        System.out.println(2 < 3 && 4 < 5);

                  The example above will print out true because the statements "2 is less than 3" and "4 is less than 5" are both true.


                  For Example:

                                                          public class And {
	                                                         public static void main(String[] args) {
		                                                        System.out.println(3==3 && 6 > 2);
	                                                         }
                                                          }

                                The Output will be true.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BOOLEAN OPERATORS: ||  (Part 2)

The second Boolean operator that we will explore is called:

                   ->  or
        1. The or operator is represented in Java by ||.
        2. It returns a Boolean value of true when at least one expression on either side of || is true.

            The code below shows all the outcomes of the Boolean operator ||:

                  //The "or" Boolean operator:

                      System.out.println(false || false); // prints false
                      System.out.println(false || true); // prints true
                      System.out.println(true || false); // prints true
                      System.out.println(true || true); // prints true


            We can also use the Boolean operator || with Boolean expressions such as the following:

                  System.out.println(2 > 1 || 3 > 4);

                      The example above will print out true because at least one statement — "2 is greater than 1" — is true even though the other
                      statement — "3 is greater than 4" — is false.

For Example:

        public class Or {
        public static void main(String[] args) {

        System.out.println(5 > 6 || 7 < 9);

        }
        }

The Output will be true.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BOOLEAN OPERATORS: !  (Part 3)

The final Boolean operator we will explore is called:

                   ->  not
        1. The not operator is represented in Java by !.
        2. It will return the opposite of the expression immediately after it. It will return false if the expression is true, and
           true if the expression is false.

            The code below shows all the outcomes of the Boolean operator !:

                  //The "not" Boolean operator:

                      System.out.println(!false); // prints true
                      System.out.println(!true); // prints false

            We can also use the Boolean operator ! with Boolean expressions such as the following:

                      System.out.println( !(4 <= 10) );

            The example above will print out false because the statement "4 is less than or equal to 10" is true,
            but the ! operator will return the opposite value, which is false.

For Example:

public class Not {
	public static void main(String[] args) {

		System.out.println(!(3 == 2));
		System.out.println( (1>=5) );

	}
}

The Output will be :
                        true
                        false

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BOOLEAN OPERATORS: PRECEDENCE

--> The three Boolean operators &&, ||, and ! can also be used together and used multiple times to form larger Boolean expressions.

--> However, just like numerical operators, Boolean operators follow rules that specify the order in which they are evaluated.
    This order is called Boolean operator precedence.

--> The precedence of each Boolean operator is as follows:

      1. !  is evaluated first.
      2. &&  is evaluated second.
      3. || is evaluated third.

-->  Like numerical expressions, every expression within parentheses is evaluated first.

-->	Expressions are also read from left to right.

								The following statement demonstrates how Boolean operator precedence works:

														System.out.println( !(false) || true && false);

							The example above will print out true. In order, the expression is evaluated as follows:

													1.	First, the ! Boolean operator in !(false) returns true.
													2.  Second, true && false evaluates to false.
													3.  Finally, the remaining expression true || false evaluates to true.

For Example:

public class Precedence {
	public static void main(String[] args) {

		boolean riddle = !( 1 < 8 || (5 > 2 && 3 < 5));
		System.out.println(riddle);

	}
}

The Output will be False.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF STATEMENT:

--> The if statement is not followed by a semicolon (;). Instead it uses curly braces ({ and }) to surround
    the code block that gets run when the Boolean expression is true.

For Example:

public class If {
	public static void main(String[] args) {

		if (9 > 2) {

			System.out.println("Access granted.");

		}

	}
}

The Output will be Access Granted.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF-ELSE STATEMENT:

--> Here's an example of if/else syntax:


												if (1 < 3 && 5 < 4) {
												System.out.println("I defy the Boolean laws!")
												} else {
												System.out.println("You can thank George Boole!");
												}


For Example:

public class IfElse {
	public static void main(String[] args) {

		if (7 < 7) {

			System.out.println("Try again...");

		} else {

			System.out.println("Success!");

		}

	}
}

The Output will be Success.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF-ELSEIF-ELSE STATEMENT:

--> Here's an example of control flow with the if/else if/else statement:


																															int shoeSize = 10;
																															if (shoeSize > 12) {
    																											System.out.println("Sorry, your shoe size is currently not in stock.");
																													} else if (shoeSize >= 6) {
    																									System.out.println("Your shoe size is in stock!");
																											} else {
    																							System.out.println("Sorry, this store does not carry shoes smaller than a size 6.");
																									}

                        In the example above, the int variable shoeSize is equal to 10, which is not greater
											  than 12, but it is greater than or equal to 6. Therefore, the code block after the
												else if statement will be run.

For Example:

public class IfElseIf {
	public static void main(String[] args) {

		int round = 11;

		if (round > 12) {

			System.out.println("The match is over!");

		} else if (round > 0) {

			System.out.println("The match is underway!");

		}	else {

			System.out.println("The boxing match hasn't started yet.");

		}
	}
}

The Output will be "The match is underway!"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 TERNARY CONDITIONAL:

 --> if/else statements can become lengthy even when you simply want to return a value depending on a Boolean expression.
     Fortunately, Java provides a shortcut that allows you to write if/else statements in a single line of code.
		 It is called the ternary conditional statement.

--> The term ternary comes from a Latin word that means "composed of three parts".

These three parts are:

							1. A Boolean Expression
							2. A single statement that gets executed if the Boolean expression is True.
							3. A single statement that gets executed if the Boolean expression is False.


			--> Here is an example of a ternary conditional statement:

												int pointsScored = 21;

												char gameResult = (pointsScored > 20) ? 'W' : 'L';
												System.out.println(gameResult);

						In the example above, the int variable called pointsScored is equal to 21.

						The Boolean expression is (pointsScored > 20), which evaluates to true. This will return the value of 'W', which is
						assigned to the variable gameResult. The value 'W' is printed to the console.


For Example:

public class Ternary {
	public static void main(String[] args) {

		int fuelLevel = 3;

		char canDrive = (fuelLevel > 0) ? 'Y' : 'N';
		System.out.println(canDrive);

	}
}

The Output will be Y.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SWITCH STATEMENT:

--> The conditional statements that we have covered so far require Boolean expressions to determine which code block to run.
    Java also provides a way to execute code blocks based on whether a block is equal to a specific value. For those specific cases,
		we can use the switch statement, which helps keep code organized and less wordy.

The switch statement is used as follows:

																				int restaurantRating = 3;

																				switch (restaurantRating) {

																				case 1: System.out.println("This restaurant is not my favorite.");
																				break;

																				case 2: System.out.println("This restaurant is good.");
																				break;

																				case 3: System.out.println("This restaurant is fantastic!");
																				break;

																				default: System.out.println("I've never dined at this restaurant.");
																				break;
																				}

										In the example above, we assigned the int variable restaurantRating a value of 3.
										The code will print a message to console based on the value of restaurantRating.

										In this case, This restaurant is fantastic! is printed to the console.

										The break statement will exit the switch statement after a condition is met. Without the break statement,
										Java will continue to check whether the value of restaurantRating matches any other cases.

										The default case is printed only if restaurantRating is not equal to an int with the value of 1, 2, or 3.

For Example:

public class Switch {
	public static void main(String[] args) {

		char penaltyKick = 'R';

		switch (penaltyKick) {

			case 'L': System.out.println("Messi shoots to the left and scores!");
								break;
			case 'R': System.out.println("Messi shoots to the right and misses the goal!");
								break;
			case 'C': System.out.println("Messi shoots down the center, but the keeper blocks it!");
								break;
			default:
				System.out.println("Messi is in position...");

		}

	}
}

The Output will be "Messi shoots to the right and misses the goal!"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
