public class Name {
	public static void main(String[] args) {

		System.out.println("John");

	}
}

The Example above will print John as the output.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

***The first data type we will use is int.

--> int is short for integer, which are all positive and negative numbers, including zero. This number could represent the number of visits a website has
    received or the number of programming languages you know.
-->The int data type only allows values between -2,147,483,648 and 2,147,483,647.

For example:

public class DataTypes {
	public static void main(String[] args) {

		System.out.println(12);

	}
}

The Output will be 12.

int data types do not need to be typed within quotes

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DATA TYPE #2:  Boolean

--> boolean is a data type that can only be either true or false.

For Example:

public class DataTypesB {
	public static void main(String[] args) {

		System.out.println(true);

	}
}

The output will be true.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DATA TYPE #3: Char

--> The char data type is used to represent single characters. That includes the keys on a keyboard that are used to produce text.

--> char is short for character and can represent a single character.

-->All char values must be enclosed in single quotes, like this: 'G'.

For Example:

public class DataTypesC {
	public static void main(String[] args) {

		System.out.println('G');

	}
}

The output will be G.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

VARIABLES:

--> The int, boolean, and char are fundamental data types of Java that we will see again later in the course.

--> Another important feature of Java (and of many programming languages) is the ability to store values using variables.

  1. A variable stores a value.

  2. In Java, all variables must have a specified data type.

--> A semicolon ; is also used to end all Java single code statements. (Some statements do not end with a Semi-Colon)

For Example:

public class Variables {
	public static void main(String[] args) {

		int myNumber = 42;
		boolean isFun = true;
		char movieRating = 'A';

	}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMMENTS:

-->A comment is text you want Java to ignore. Comments allow you to describe code or keep notes.
-->By using comments in the Java code, you may help yourself and even other programmers understand the purpose of code that a comment refers to.
-->In Java, there are two styles of comments: single line comments and multi-line comments:

  1. Single line comments are one line comments that begin with two forward slashes. For e.g, //This is a comment!

  2.Multi-line comments are generally longer comments that can span multiple lines. They begin with /* and end with */

    For Example:

    /*
    This
    is
    a
    multi-line
    comment!
    */

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MATH: +, -, *, and /

--> You can add, subtract, multiply, and divide numbers and store them in variables like this:

          int sum = 34 + 113;
          int difference = 91 - 205;
          int product = 2 * 8;
          int quotient = 45 / 3;

For Example:

public class Arithmetic {
	public static void main(String[] args) {

		int myNumber = 10 * 2;
		System.out.println(myNumber);

	}
}

The output (10*2) will be 20.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MATH %, also known as the Modulo:

--> The modulo operator - represented in Java by the % symbol - returns the remainder of dividing two numbers.

-->For instance, 15 % 6 will return the value of 3, because that is the remainder left over after dividing 15 by 6.

For Example:

public class Modulo {
	public static void main(String[] args) {

		int myRemainder = 17 % 15;
		System.out.println(myRemainder);

	}
}

The output will be 2.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RELATIONAL OPERATORS:

--> Relational operators compare data types that have a defined ordering, like numbers (since numbers are either smaller or larger than other numbers).

--> Relational operators will always return a boolean value of true or false.

--> Here are a few relational operators:

    1. <   : less than.
    2. <=  : less than or equal to.
    3. >   : greater than.
    4.>=   : greater than or equal to

--> A relational operator is placed between the two operands (the terms that you want to compare using the relational operator).
-->  The result of a relational operation is printed out in the following statement:

                                          System.out.println(5 < 7);

The example above will print out true because the statement "5 is less than 7" is true.

For Example:

public class RelationalOperators {
	public static void main(String[] args) {

		System.out.println(7 <= 3);

	}
}

The Output will be False.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EQUALITY OPERATORS:

--> In Java, equality operators are used to test equality.
--> The equality operators are:

          1. ==     : equal to.
          2. !=     : not equal to.
--> Equality operators do not require that operands share the same ordering. For example, you can test equality across boolean, char,
    or int data types. The example below combines assigning variables and using an equality operator:

              char myChar = 'A';
              int myInt = -2;
              System.out.println(myChar == myInt);

The example above will print out false because the value of myChar ('A') is not the same value as myInt ('-2').

For Example:

public class EqualityOperators {
	public static void main(String[] args) {
int x = 18;
int y = 18;
		System.out.println(x != y);
	}
}

The output will be False.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
